#!/usr/bin/env bash

set -Eeuo pipefail

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
nc='\033[0m'

# Get dotfiles dir (so run this script from anywhere)
export dotfiles_dir
dotfiles_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"

help() {
    echo "Dotfiles management"
    echo
    echo -e "Usage: ${yellow}$0 <command>${nc}"
    echo
    echo "Commands:"
    echo " help:    This help message"
    echo " update:  Update dotfiles"
    echo " edit:    Open dotfiles directory for editing"
    echo
}

run_or_fail_with() {
    local errmsg=$1
    shift
    if ! out=$(2>&1 $@); then
        echo -e "${red}${errmsg}${nc}"
        echo "Output:"
        echo "$out"
        exit 1
    fi
}

pull_dotfiles() {
    echo -e "${yellow}Pulling latest dotfiles changes${nc}"
    cd "$dotfiles_dir"
    run_or_fail_with "Error updating dotfiles checkout. Fix it and run update again" git pull --all --prune --rebase
}

check_workstation_type() {
  if [[ ! -f $HOME/.workstation-type ]]; then
    local workstation_type=""
    until [[ $workstation_type == "work" || $workstation_type == "private" ]]; do
      echo -e "${yellow}What type of workstation is this, 'work' or 'private'?${nc}"
      read -e workstation_type
    done
    echo $workstation_type > $HOME/.workstation-type
  fi
}

set_macos_defaults() {
    echo -e "${yellow}Set macOS defaults"

    run_or_fail_with "Could not set macOS defaults" "$dotfiles_dir"/macos/set-defaults.sh
}

setup_gitconfig() {
  if [[ ! -f "$dotfiles_dir"/git/gitconfig.local.symlink ]]; then
    echo -e "${yellow}Setting up git${nc}"

    local create_key=false
    local ssh_key_file=""

    if [[ -f $HOME/.ssh/id_ed25519 ]]; then
      ssh_key_file="$HOME/.ssh/id_ed25519"
    elif [[ -f $HOME/.ssh/id_rsa ]]; then
      ssh_key_file="$HOME/.ssh/id_rsa"
    else
      echo -e "${yellow}No ssh key found. Will create a new one if you continue${nc}"
      echo ""
      read -p "Abort with cmd-c, press any key to continue" -n1 -s
      create_key=true
    fi

    echo -e "${yellow}What is your git author name?${nc}"
    read -e git_authorname
    echo -e "${yellow}What is your git author email?${nc}"
    read -e git_authoremail

    if [[ "$create_key" = "true" ]]; then
        ssh-keygen -t ed25519 -C "$git_authoremail"
        ssh_key_file="$HOME/.ssh/id_ed25519"
    fi

    cat <<INI > git/gitconfig.local.symlink
[user]
        name = $git_authorname
        email = $git_authoremail
        signingkey = $ssh_key_file
INI
  fi
}

link_file() {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [[ -f "$dst" ]] || [[ -d "$dst" ]] || [[ -L "$dst" ]]; then
    if [[ "$overwrite_all" == "false" ]] && [[ "$backup_all" == "false" ]] && [[ "$skip_all" == "false" ]]; then

      local currentSrc="$(readlink $dst)"

      if [[ "$currentSrc" == "$src" ]]; then
        skip=true;
      else
        echo -e "${yellow}File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?${nc}"
        read -sn 1 action

        case "$action" in
          o)
            overwrite=true;;
          O)
            overwrite_all=true;;
          b)
            backup=true;;
          B)
            backup_all=true;;
          s)
            skip=true;;
          S)
            skip_all=true;;
          *)
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [[ "$overwrite" == "true" ]]; then
      rm -rf "$dst"
    fi

    if [[ "$backup" == "true" ]]; then
      mv "$dst" "${dst}.backup"
    fi
  fi

  if [[ "$skip" != "true" ]]; then
    ln -s "$src" "$dst"
  fi
}

install_symlinks() {
    echo -e "${yellow}Installing symlinks${nc}"

    local overwrite_all=false backup_all=false skip_all=false

    for src in $(find -H "$dotfiles_dir" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

setup_brew() {
    echo -e "${yellow}Setting up brew.sh. Might ask for sudo password${nc}"

    if ! 1>/dev/null 2>&1 which brew; then
        /usr/bin/env bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        if [[ -f /opt/homebrew/bin/brew ]]; then
          eval "$(/opt/homebrew/bin/brew shellenv)"
        elif [[ -f /usr/local/bin/brew ]]; then
          eval "$(/usr/local/bin/brew shellenv)"
        fi
    fi

    run_or_fail_with "Could not fetch latest Homebrew formulae" brew update
    run_or_fail_with "Error upgrading brew packages" brew upgrade

    bundle="$dotfiles_dir"/Brewfile
    bundles=($dotfiles_dir"/Brewfile.all")
    workstation_type=$(cat $HOME/.workstation-type)
    if [[ -f $dotfiles_dir"/Brewfile.${workstation_type}" ]]; then
      bundles+=($dotfiles_dir"/Brewfile.${workstation_type}")
    fi
    cat "${bundles[@]}" > $bundle
    if ! 1>/dev/null 2>&1 brew bundle check --file=$bundle; then
        run_or_fail_with "Error installing Brewfile dependencies" brew bundle --file=$bundle
    fi
}

update() {
    pull_dotfiles
    check_workstation_type
    set_macos_defaults
    setup_gitconfig
    install_symlinks
    setup_brew

    echo -e "${green}Success! Dotfiles updated${nc}"
}

if [[ $# -eq 0 ]]; then
    help
    exit 0
fi

case $1 in
    "" | "help" | "-h" | "--help")
        help;;
    "edit")
        exec "${EDITOR:-vim}" "$dotfiles_dir";;
    "update")
        update;;
    *)
        >&2 echo -e "${red}Error: '$command_name' is not a known command${nc}"
        >&2 help
        exit 1
        ;;
esac